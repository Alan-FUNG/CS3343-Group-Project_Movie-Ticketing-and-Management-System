package release.record;


import release.exception.ExNoPaymentRecord;
import release.payment.Payment;
import release.product.MovieTicket;
import release.product.Product;
import release.product.ProductWithPortion;
import release.user.Member;
import release.user.User;


import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;


/**
 * PaymentRecord class that contains the payment record of a customer<br>
 * The payment record contains the customer, products, movie tickets and payment details<br>
 * The payment record is stored in a list of all payment records<br>
 * The payment record is created when a customer makes a payment<br>
 * The payment record is stored in record class, so that they cannot be modified once created<br>
 *<br><br> <strong>Note: the getters are generated by java, to use them, simply call the methods by its corresponding variable name 
 * e,g to get the customer info, you can use customer()</strong> 
 */
public record PaymentRecord(Member user, Map<Product, Integer> productList, List<MovieTicket> movieTicketList, Payment payment) {
    // TODO: save the record to database
    private static final List<PaymentRecord> allRecord = new ArrayList<>();

    /**
     * Constructor for PaymentRecord class
     * @param user : customer that made the payment
     * @param productList : list of products bought
     * @param movieTicketList : list of movie tickets bought
     * @param payment : payment details
     */
    public PaymentRecord(Member user, Map<Product, Integer> productList, List<MovieTicket> movieTicketList, Payment payment) {
        this.user = user;
        // cannot set the list to point to the list passed in, as it will be modified outside
        // e.g. may be removed by the clear function in shopping cart
        // therefore, must create a new list to store the data
        this.productList = new LinkedHashMap<>(productList);
        this.movieTicketList = new ArrayList<>(movieTicketList);
        this.payment = payment;
        allRecord.add(this);
    }
    
    /**
     * Get all payment records
     * @return list of all payment records
     */
    public static List<PaymentRecord> getAllRecord() {
        return allRecord;
    }

    public static String showAllPaymentRecords(List<PaymentRecord> paymentRecords) throws ExNoPaymentRecord {
        if (paymentRecords.isEmpty()) {
            throw new ExNoPaymentRecord();
        }
        int recordCnt = 0;
        StringBuilder results = new StringBuilder();
        final int lineSeparator = 73;
        for (PaymentRecord paymentRecord : paymentRecords) {
            results.append(String.format("Payment Record %d (%s):%n", ++recordCnt, paymentRecord.payment().getPaymentType().name()));
            List<MovieTicket> movieTickets = paymentRecord.movieTicketList();
            if (!movieTickets.isEmpty()) {
                int ticketCnt = 0;
                results.append(String.format("%4s%-32s", " ", "Movie Name"))
                        .append(String.format("%-8s", "House")).append(String.format("%-8s", "Start"))
                        .append(String.format("%-8s", "End")).append(String.format("%-7s", "Seat"))
                        .append(String.format("%-6s", "Price")).append("\n").append("-".repeat(lineSeparator)).append("\n");
                for (MovieTicket item : movieTickets) {
                    results.append(String.format("%2d) ", ++ticketCnt))
                            .append(String.format("%-30s%2s", item.getMovie().getName(), " "))
                            .append(String.format("%2s%-6d", " ", item.getMovieSession().getHouse().getHouseNumber()))
                            .append(String.format("%-8s", item.getMovieSession().getStartTime()))
                            .append(String.format("%-8s", item.getMovieSession().getEndTime()))
                            .append(String.format("%-7s", item.getSeat()))
                            .append(String.format("$%-5.1f", item.getPrice())).append("\n");
                }
                results.append("-".repeat(lineSeparator)).append("\n");
            }
            Map<Product, Integer> products = paymentRecord.productList();
            if (!products.isEmpty()) {
                int productCnt = 0;
                results.append("\n").append(String.format("%4s%-32s", " ", "Snacks/Drinks"))
                        .append(String.format("%-16s", "Portion"))
                        .append(String.format("%-15s", "Quantity")).append(String.format("%-6s", "Price"))
                        .append("\n").append("-".repeat(lineSeparator)).append("\n");
                for (Map.Entry<Product, Integer> entry : products.entrySet()) {
                    Product product = entry.getKey();
                    results.append(String.format("%2d) ", ++productCnt))
                            .append(String.format("%-30s%2s", product.getName(), " "))
                            .append(String.format("%-16s", ((ProductWithPortion) product).getPortion()))
                            .append(String.format("%3d%12s", entry.getValue(), " "))
                            .append(String.format("$%-4.1f", product.getPrice())).append("\n");
                }
                results.append("-".repeat(lineSeparator)).append("\n");
            }
            results.append("~".repeat(lineSeparator)).append("\n\n");
        }
        return results.toString();
    }
} 
