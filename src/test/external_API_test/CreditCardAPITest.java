package test.external_API_test;

import release.externalAPI.CreditCardAPI;
import release.externalAPI.CreditCardAPIFactory;
import release.externalAPI.ExternalAPI;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Random;

/**
 * CreditCardAPITest class
 * Unit test for CreditCardAPI
 */
public class CreditCardAPITest {
    Random random;
    CreditCardAPIFactory creditCardAPIFactory;

    /**
     * Set up the test environment
     */
    @BeforeEach
    void setUp() {
        random = new Random(10);
        creditCardAPIFactory = new CreditCardAPIFactory();
    }

    /**
     * Test if the CreditCardAPIFactory can create an instance of CreditCardAPI
     */
    @Test
    void testCreditCardAPIFactory() {
        ExternalAPI externalAPI = creditCardAPIFactory.getExternalAPI();
        Assertions.assertNotNull(externalAPI);
        Assertions.assertTrue(externalAPI instanceof CreditCardAPI);
    }

    /**
     * Test if the CreditCardAPIFactory can create an instance of CreditCardAPI with a random object
     */
    @Test
    void testCreditCardAPIFactory_Random() {
        ExternalAPI externalAPI = creditCardAPIFactory.getExternalAPI(random);
        Assertions.assertNotNull(externalAPI);
        Assertions.assertTrue(externalAPI instanceof CreditCardAPI);
    }

    /**
     * Test if the CreditCardAPIFactory can create an instance of CreditCardAPI with a null random object
     * The random object should be generated inside the method, and the method should not throw NullPointerException
     */
    @Test
    void testCreditCardAPIFactory_Random_Null() {
        ExternalAPI externalAPI = creditCardAPIFactory.getExternalAPI(null);
        // test when random is null, it should return CreditCardAPI object and can do payment without NullPointerException
        Assertions.assertDoesNotThrow(() -> externalAPI.doPayment(1));
        Assertions.assertNotNull(externalAPI);
        Assertions.assertTrue(externalAPI instanceof CreditCardAPI);
    }

    /**
     * Test if the CreditCardAPI can do payment successfully
     * The payment should be successful, as the number generated by random should be greater than the price
     */
    @Test
    void testDoPayment() {
        ExternalAPI creditCardAPI = creditCardAPIFactory.getExternalAPI(random);
        Assertions.assertTrue(creditCardAPI.doPayment(100));
    }

    /**
     * Test if the CreditCardAPI can fail to do payment
     * The payment should fail, as the number generated by random should be smaller than the price
     */
    @Test
    void testDoPayment_Fail() {
        ExternalAPI creditCardAPI = creditCardAPIFactory.getExternalAPI(random);
        Assertions.assertFalse(creditCardAPI.doPayment(15));
    }
}
